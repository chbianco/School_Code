% Script to solve the Rayleigh equation using an iterative% shooting integration method.% Updated Kenny Breuer Jan 2025global alpha calpha  = 0.2;tolerance = 1.e-7;ymax = 6;options = odeset('RelTol',tolerance);  %,'Stats','on','OutputFcn',@odeplot)% Get two guesses for C to start the iteration% The b.c. at the left end is that v' = alpha v% The b.c. at the right end is v'+alpha v = 0C1 = 0.1 + 0.1*i;c = C1;[y v] = ode113('rayleigh', [-ymax ymax], [1; alpha], options);E1 = v(end,2) + alpha*v(end,1);C2 = 1.03*(1+i)*C1;c = C2;[y v] = ode113('rayleigh', [-ymax ymax], [1; alpha], options);E2 = v(end,2) + alpha*v(end,1);% Use a shooting method and loop until converged:while abs(E2) > tolerance,  slope = (E2 - E1) / (C2 - C1);  E1 = E2;  C1 = C2;  C2 = C1 - E1/ slope;    c = C2;  [y,v] = ode113('rayleigh', [-ymax ymax], [1 alpha],  options);  E2 = v(end,2) + alpha*v(end,1);  fprintf('C: (%10.6f, %10.6f), Error: %6.2e, N-steps: %3d\n', ...  	  real(C2), imag(C2), abs(E2), length(v));enddisp('Converged');% find Max:v_max = max(abs(v(:,1)));v = v/v_max;figuresubplot(1,2,1)plot(y, tanh(y), y,-2*tanh(y).*sech(y).^2,  'LineWidth',2)legend('U', 'U''''')xlabel('y')ylabel('Amplitude')title('Mean flow')set(gca, 'FontSize',16)subplot(1,2,2)plot(y, abs(v(:,1)), y, abs(v(:,2))/alpha, 'LineWidth',2)legend('v', 'u')xlabel('y')ylabel('Amplitude')title(['Eigenmodes, \alpha = ' sprintf('%4.2f', alpha)])set(gca, 'FontSize',16)