function [eigvals, eigvecs, y] = cheb_poiseuille_stability(n, Re)

    % Set up Chebyshev collocation points and differentiation matrices
    [y, ~, D1, D2, D3, D4] = setup_cheb(n);
    
    % Define the base flow profile U(y) = 1 - y^2 and its derivatives
    U = 1 - y.^2;
    d2U = -2 * ones(size(y)); % Second derivative of U
    
    % Extract interior matrices (excluding boundary rows)
    D2_int = D2(2:end-1, 2:end-1);
    D4_int = D4(2:end-1, 2:end-1);
    I_int = eye(size(D2_int));

    % Define the base flow profile U(y) and its derivatives (for interior points)
    U_int = U(2:end-1);
    d2U_int = d2U(2:end-1);

    % Convert to diagonal matrices
    U_diag = diag(U_int);
    d2U_diag = diag(d2U_int);

    % Construct the Orr-Sommerfeld matrix (ensuring it remains square)
    A = (D4_int - 2 * D2_int + I_int) / Re - U_diag * (D2_int - I_int) - d2U_diag;
    B = D2_int - I_int;

    % Ensure A and B are square
    assert(size(A,1) == size(A,2), 'Matrix A is not square');
    assert(size(B,1) == size(B,2), 'Matrix B is not square');

    % Solve the eigenvalue problem
    [eigvecs, eigvals_matrix] = eig(A, B);
    eigvals = diag(eigvals_matrix);
end
